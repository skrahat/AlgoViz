{"version":3,"sources":["i18n.js","styling/colours.tsx","component/UIComponents/CustomButton.tsx","redux/reducers/actions.tsx","component/Algorithms.tsx","component/UIComponents/Footer.tsx","component/graphComponent/BarGraph.tsx","api/factApi.ts","component/UIComponents/FactCard.tsx","page/MainPage.tsx","App.tsx","redux/reducers/reducers.tsx","redux/reducers/store.tsx","index.tsx"],"names":["resources","en","translation","fr","i18n","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","lng","interpolation","escapeValue","colours","primary","secondary","success","accent","error","background","footer","disable","CustomButton","_ref","id","children","width","props","_objectWithoutProperties","_excluded","_jsx","Button","_objectSpread","sx","height","color","display","margin","backgroundColor","border","concat","generateNumbersAction","arraySize","type","payload","sortInProgressAction","status","sortedAction","sorted","iterationsCompletedAction","clean","choice","sortNumbersBubbleAction","newArray","graphNumber","sortNumbersInsertionAction","BubbleSort","_asyncToGenerator","_regeneratorRuntime","mark","_callee","result","signal","dispatch","len","i","_loop","j","_ret","sortedArray","wrap","_context2","prev","next","_toConsumableArray","length","unsortedArray","swap","_sortedArray","_context","aborted","map","item","abrupt","v","value","index","timer","stop","delegateYield","t0","_x","_x2","_x3","_x4","apply","arguments","InsertionSort","_ref2","_callee2","array","_loop2","_ret2","_context4","current","_sortedArray2","_context3","_x5","_x6","_x7","_x8","_x9","_timer","_callee3","ms","_context5","Promise","resolve","setTimeout","Math","pow","Footer","_jsxs","Box","padding","textAlign","Typography","variant","Link","href","underline","mt","Date","getFullYear","Chart","register","BarController","BarElement","CategoryScale","LinearScale","Title","Tooltip","BarGraph","sortingInProgressState","style","GenerateDataGraph","arrayX","arrayY","push","x","y","GenerateDataColourGraph","data","labels","datasets","label","Array","fill","Bar","options","plugins","legend","scales","title","grid","text","animation","duration","fetchData","_fetchData","limit","response","axios","get","headers","params","sent","console","log","FactCard","description1","description2","Card","minWidth","maxHeight","CardActionArea","CardContent","gutterBottom","component","CardActions","theme","createTheme","palette","main","Dashboard","_useTranslation","useTranslation","t","useDispatch","_useSelector","useSelector","state","resultOne","resultTwo","_useState","useState","_useState2","_slicedToArray","running","setRunning","_useState3","_useState4","languageValue","setLanguageValue","_useState5","_useState6","setDisplayFact","_useState7","_useState8","factData","setFactData","_useState9","_useState10","setArraySize","sortInProgress","iterationsCompletedState","iterationsCompleted","stopControllerRef","useRef","_React$useState","React","_React$useState2","selectedAlgorithm","setSelectedAlgorithm","MenuProps","PaperProps","ITEM_HEIGHT","bubbleSort","insertionSort","callFacts","_ref3","useEffect","Container","disableGutters","flexDirection","minHeight","ThemeProvider","AppBar","position","Toolbar","mr","xs","md","fontSize","maxWidth","Slider","min","step","max","onChange","event","disabled","valueLabelDisplay","flexGrow","alignItems","justifyContent","onClick","_stopControllerRef$cu","abort","FormControl","Select","multiple","displayEmpty","target","split","input","OutlinedInput","renderValue","selected","join","inputProps","MenuItem","name","AbortController","includes","all","err","marginRight","borderRadius","Paper","elevation","marginLeft","Checkbox","prevValue","icon","StickyNote2Icon","checkedIcon","FormControlLabel","control","Switch","checked","newLanguage","changeLanguage","then","labelPlacement","ToastContainer","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","marginTop","gridTemplateRows","className","App","I18nextProvider","initialState","displayComplete","algoStop","generatedNumbers","rootReducer","undefined","action","counter","randomNumber","parseFloat","random","toFixed","arrayBubble","arrayInsertion","store","configureStore","reducer","ReactDOM","render","StrictMode","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.00ef319c.chunk.js","sourcesContent":["import i18n from 'i18next';\nimport Backend from 'i18next-http-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { initReactI18next } from 'react-i18next';\nimport translationEN from '../src/locales/en/translation.json';\nimport translationFR from '../src/locales/fr/translation.json';\n\nconst resources = {\n    en: {\n        translation: translationEN\n    },\n    fr: {\n        translation: translationFR\n    }\n};\n\ni18n.use(Backend)\n\n    .use(LanguageDetector)\n\n    .use(initReactI18next)\n\n    .init({\n        resources,\n        fallbackLng: 'en',\n        debug: true,\n        lng: 'en',\n        interpolation: {\n            escapeValue: false // not needed for react as it escapes by default\n        }\n    });\n\nexport default i18n;\n","export const colours = {\n    primary: '#292929',\n    secondary: '#f0f0f0',\n    success: '#7CCA67',\n    accent: '#FFD25A',\n    error: '#FF785A',\n    background: '#CCCCCC',\n    footer: '#292929',\n    disable: '#525252'\n};\n","import Button, { ButtonProps } from '@mui/material/Button';\nimport { colours } from '../../styling/colours';\n\ninterface CustomButtonProps extends ButtonProps {\n    id: string;\n    children: React.ReactNode;\n    width?: string;\n}\n\nconst CustomButton: React.FC<CustomButtonProps> = ({\n    id,\n    children,\n    width,\n    ...props\n}) => {\n    return (\n        <Button\n            id={id}\n            sx={{\n                width: width ? width : '10rem',\n                height: '3rem',\n                color: 'white',\n                display: 'block',\n                margin: '0rem 0.8rem',\n                //border: `1px solid ${colours.accent}`,\n                '&:hover': {\n                    backgroundColor: colours.accent,\n                    color: 'black'\n                },\n                '&.Mui-disabled': {\n                    // Override disabled text color\n                    color: colours.disable,\n                    border: `1px solid ${colours.disable}`\n                },\n                ...props.sx\n            }}\n            {...props}\n        >\n            {children}\n        </Button>\n    );\n};\n\nexport default CustomButton;\n","export const generateNumbersAction = (arraySize: number) => {\n    //console.log('generateNumbers action reached');\n    return {\n        type: 'GENERATE_NUMBERS',\n        payload: arraySize\n    };\n};\nexport const sortInProgressAction = (status: boolean) => {\n    //console.log('sortInProgess action reached');\n    return {\n        type: 'SORT_IN_PROGRESS',\n        payload: status\n    };\n};\nexport const sortedAction = (sorted: boolean) => {\n    //console.log('sorted action reached');\n    return {\n        type: 'SORTED',\n        payload: sorted\n    };\n};\nexport const startBubbleSortAction = (result: any, algoStop: any) => {\n    return {\n        type: 'START_BUBBLE_SORT',\n        payload: { result, algoStop }\n    };\n};\n\nexport const stopBubbleSortAction = () => {\n    return {\n        type: 'STOP_BUBBLE_SORT'\n    };\n};\n\nexport const iterationsCompletedAction = (clean: boolean, choice?: number) => {\n    return {\n        type: 'ITERATIONS_COMPLETED',\n        payload: { clean: clean, choice: choice }\n    };\n};\nexport const sortNumbersBubbleAction = (\n    newArray: number[],\n    graphNumber: number\n) => {\n    //console.log('SORT_NUMBERS_BUBBLE action reached');\n\n    return {\n        type: 'SORT_NUMBERS_BUBBLE',\n        payload: { newArray: newArray, graphNumber: graphNumber }\n    };\n};\nexport const sortNumbersInsertionAction = (\n    newArray: number[],\n    graphNumber: number\n) => {\n    //console.log('SORT_NUMBERS_INSERTION action reached');\n\n    return {\n        type: 'SORT_NUMBERS_INSERTION',\n        payload: { newArray: newArray, graphNumber: graphNumber }\n    };\n};\n","import {\n    iterationsCompletedAction,\n    sortInProgressAction,\n    sortNumbersBubbleAction,\n    sortNumbersInsertionAction,\n    sortedAction\n} from '../redux/reducers/actions';\nimport { colours } from '../styling/colours';\n\nexport const BubbleSort = async (\n    result: any[],\n    signal: AbortSignal,\n    dispatch: any,\n    graphNumber: number\n) => {\n    //console.log('started bubble sort');\n    const newArray = [...result];\n    const len = newArray.length;\n\n    for (let i = 0; i < len; i++) {\n        for (let j = 0; j < len - 1; j++) {\n            // Check if the abort signal is triggered\n            if (signal.aborted) {\n                //console.log('Bubble sort aborted');\n                const unsortedArray = newArray.map((item) => {\n                    return { ...item, color: colours.accent };\n                });\n                dispatch(sortNumbersBubbleAction(unsortedArray, graphNumber));\n                return;\n            }\n\n            if (newArray[j].value > newArray[j + 1].value) {\n                let swap = newArray[j];\n                newArray[j] = newArray[j + 1];\n                newArray[j + 1] = swap;\n\n                // Create a new sorted array with modified colors\n                const sortedArray = newArray.map((item, index) => {\n                    if (index === j || index === j + 1) {\n                        //console.log('item coloring test:' + item.color);\n                        if (item.color === '#f45050') {\n                            return { ...item, color: colours.accent };\n                        } else {\n                            return { ...item, color: colours.error };\n                        }\n                    }\n                    return item;\n                });\n\n                dispatch(sortNumbersBubbleAction(sortedArray, graphNumber));\n                dispatch(iterationsCompletedAction(false, 0));\n                await timer(len);\n            }\n        }\n    }\n    // Set the color of all elements to green to indicate the sorting is complete\n    const sortedArray = newArray.map((item) => {\n        return { ...item, color: colours.success };\n    });\n\n    dispatch(sortNumbersBubbleAction(sortedArray, graphNumber));\n\n    dispatch(sortInProgressAction(false));\n    dispatch(sortedAction(true));\n    //console.log('ended bubble sort');\n};\n\nexport const InsertionSort = async (\n    array: any[],\n    signal: AbortSignal,\n    dispatch: any,\n    graphNumber: number\n) => {\n    const newArray = [...array];\n    const len = newArray.length;\n\n    for (let i = 1; i < len; i++) {\n        let current = newArray[i];\n        let j = i - 1;\n\n        while (j >= 0 && newArray[j].value > current.value) {\n            if (signal.aborted) {\n                //console.log('Insertion sort aborted');\n                const unsortedArray = newArray.map((item) => {\n                    return { ...item, color: colours.accent };\n                });\n                dispatch(\n                    sortNumbersInsertionAction(unsortedArray, graphNumber)\n                );\n                return;\n            }\n            newArray[j + 1] = newArray[j];\n            // Create a new sorted array with modified colors\n            // eslint-disable-next-line no-loop-func\n            const sortedArray = newArray.map((item, index) => {\n                if (index === j || index === j + 1) {\n                    if (item.color === '#f45050') {\n                        return { ...item, color: colours.accent };\n                    } else {\n                        return { ...item, color: colours.error };\n                    }\n                }\n                return item;\n            });\n            dispatch(sortNumbersInsertionAction(sortedArray, graphNumber));\n            dispatch(iterationsCompletedAction(false, 1));\n            await timer(len);\n            j--;\n        }\n\n        newArray[j + 1] = current;\n\n        // Create a new sorted array with green color for the current element\n        const sortedArray = newArray.map((item, index) => {\n            if (index === j + 1) {\n                return { ...item, color: colours.error };\n            }\n            return item;\n        });\n\n        dispatch(sortNumbersInsertionAction(sortedArray, graphNumber));\n        //dispatch(iterationsCompletedAction(false));\n        //await timer(100);\n    }\n\n    // Set the color of all elements to green to indicate the sorting is complete\n    const sortedArray = newArray.map((item) => {\n        return { ...item, color: colours.success };\n    });\n\n    dispatch(sortNumbersInsertionAction(sortedArray, graphNumber));\n    dispatch(sortInProgressAction(false));\n    dispatch(sortedAction(true));\n    //console.log('ended insertion sort');\n};\n\n// delay timer function\nasync function timer(ms: number) {\n    if (ms < 20)\n        return new Promise((resolve) => setTimeout(resolve, 1000 / ms));\n    return new Promise((resolve) =>\n        setTimeout(resolve, 1000 / Math.pow(ms + 1, 1.5))\n    );\n}\n","import React from 'react';\nimport { Box, Typography, Link } from '@mui/material';\nimport { colours } from '../../styling/colours';\n\nconst Footer = () => {\n    const email = 'asaduzzaman.rahat@mail.mcgill.ca';\n    const website = 'https://www.asadrahat.ca';\n\n    return (\n        <Box\n            sx={{\n                padding: '1rem',\n                textAlign: 'center',\n                color: colours.primary\n            }}\n        >\n            <Typography variant=\"body2\" color=\"inherit\">\n                <Link\n                    href={email}\n                    variant=\"caption\"\n                    color=\"inherit\"\n                    underline=\"none\"\n                >\n                    Contact me\n                </Link>\n                <br />\n            </Typography>\n            <Typography variant=\"caption\" color=\"inherit\" mt={1}>\n                <Link\n                    href={website}\n                    variant=\"caption\"\n                    color=\"inherit\"\n                    underline=\"none\"\n                >\n                    &copy; {new Date().getFullYear()} Asad Rahat. All rights\n                    reserved.\n                </Link>\n            </Typography>\n            <Typography variant=\"body2\" color=\"grey\">\n                v1.3\n            </Typography>\n        </Box>\n    );\n};\n\nexport default Footer;\n","import React from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart } from 'chart.js';\nimport {\n    BarController,\n    BarElement,\n    CategoryScale,\n    LinearScale,\n    Title,\n    Tooltip\n} from 'chart.js';\nimport { colours } from '../../styling/colours';\n\nChart.register(\n    BarController,\n    BarElement,\n    CategoryScale,\n    LinearScale,\n    Title,\n    Tooltip\n);\n\ninterface BarGraphProps {\n    result: { color: string; value: number }[];\n    sortingInProgressState: boolean;\n    sorted: boolean;\n    style?: React.CSSProperties;\n}\n\nconst BarGraph: React.FC<BarGraphProps> = ({\n    result,\n    sortingInProgressState,\n    sorted,\n    style\n}) => {\n    Chart.register(\n        BarController,\n        BarElement,\n        CategoryScale,\n        LinearScale,\n        Title,\n        Tooltip\n    );\n\n    const GenerateDataGraph = (\n        arrayX: { color: string; value: number }[],\n        arrayY: number\n    ) => {\n        var result: { x: number; y: number }[] = [];\n        for (var i = 0; i < arrayY; i++) {\n            result.push({ x: i, y: arrayX[i].value });\n        }\n        return result;\n    };\n\n    const GenerateDataColourGraph = (\n        arrayX: { color: string; value: number }[],\n        arrayY: number\n    ) => {\n        var result: string[] = [];\n        for (var i = 0; i < arrayY; i++) {\n            result.push(arrayX[i].color);\n        }\n        return result;\n    };\n\n    const data = {\n        labels: GenerateDataGraph(result, result.length).map((item) => item.x),\n        datasets: [\n            {\n                label: 'Numbers',\n                data: GenerateDataGraph(result, result.length),\n                backgroundColor: sortingInProgressState\n                    ? GenerateDataColourGraph(result, result.length)\n                    : sorted\n                    ? GenerateDataColourGraph(result, result.length).map(\n                          (color) =>\n                              color === colours.error\n                                  ? colours.error\n                                  : colours.success\n                      )\n                    : Array(result.length).fill(colours.accent)\n            }\n        ]\n    };\n\n    const options = {\n        plugins: {\n            legend: {\n                display: false\n            }\n        },\n        scales: {\n            x: {\n                title: {\n                    display: false\n                },\n                grid: {\n                    display: false // Remove x-axis grid lines\n                }\n            },\n            y: {\n                title: {\n                    display: true,\n                    text: 'Size'\n                },\n                grid: {\n                    display: false // Remove y-axis grid lines\n                }\n            }\n        },\n        animation: {\n            duration: 0\n        }\n    };\n\n    return (\n        <div style={style}>\n            <Bar options={options} data={data} />\n        </div>\n    );\n};\n\nexport default BarGraph;\n","import axios from 'axios';\n\nexport async function fetchData(limit: number): Promise<any> {\n    try {\n        const response = await axios.get(\n            'https://api.api-ninjas.com/v1/facts',\n            {\n                headers: {\n                    'X-Api-Key': 'I4H2nQwOgNmZRaRD9ermhQ==sUCGoy3QWJohzMt9'\n                },\n                params: {\n                    limit: limit\n                }\n            }\n        );\n        console.log('fetched fact data api: ' + response.data);\n\n        return response.data;\n    } catch (error) {\n        console.error('Request failed:', error);\n        throw error;\n    }\n}\n","import image from '../styling/factsImage.jpeg';\nimport * as React from 'react';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Typography from '@mui/material/Typography';\nimport { Button, CardActionArea, CardActions } from '@mui/material';\ninterface cardType {\n    title: string;\n    description1: string;\n    description2: string;\n    style?: React.CSSProperties;\n}\n\nconst FactCard: React.FC<cardType> = ({\n    title,\n    description1,\n    description2,\n    style,\n    ...props\n}) => {\n    return (\n        <Card sx={{ minWidth: '15rem', maxHeight: '15rem', ...style }}>\n            <CardActionArea>\n                {/* <CardMedia\n                    component=\"img\"\n                    height=\"140\"\n                    image={image}\n                    alt=\"green iguana\"\n                    sx={{ maxHeight: '5rem' }}\n                /> */}\n                <CardContent>\n                    <Typography gutterBottom variant=\"h5\" component=\"div\">\n                        {title}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                        {description1}\n                    </Typography>\n                    <br />\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                        {description2}\n                    </Typography>\n                </CardContent>\n            </CardActionArea>\n            <CardActions>\n                {/* <Button size=\"small\" color=\"primary\">\n                    ...Read More\n                </Button> */}\n            </CardActions>\n        </Card>\n    );\n};\nexport default FactCard;\n","import React, { useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    AppBar,\n    Box,\n    Toolbar,\n    Typography,\n    Container,\n    Slider,\n    Paper,\n    FormControlLabel,\n    SelectChangeEvent,\n    OutlinedInput,\n    FormControl,\n    Select,\n    MenuItem,\n    Checkbox\n} from '@mui/material';\nimport { useTranslation } from 'react-i18next';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport CustomButton from '../component/UIComponents/CustomButton';\nimport {\n    generateNumbersAction,\n    sortInProgressAction,\n    iterationsCompletedAction,\n    sortedAction\n} from '../redux/reducers/actions';\nimport { BubbleSort, InsertionSort } from '../component/Algorithms';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport Footer from '../component/UIComponents/Footer';\nimport BarGraph from '../component/graphComponent/BarGraph';\nimport Switch from '@mui/material/Switch';\nimport { colours } from '../styling/colours';\nimport { fetchData } from '../api/factApi';\nimport StickyNote2Icon from '@mui/icons-material/StickyNote2';\nimport FactCard from '../component/UIComponents/FactCard';\nimport GraphComponent from '../component/graphComponent';\n\n// Define the MUI theme\nconst theme = createTheme({\n    palette: {\n        primary: {\n            main: colours.primary\n        },\n        secondary: {\n            main: colours.secondary\n        },\n        text: {\n            primary: colours.accent,\n            secondary: colours.primary\n        }\n    }\n});\n\n// Define the fact data structure\ninterface Fact {\n    fact: string;\n}\n\nexport default function Dashboard(): JSX.Element {\n    const { t, i18n } = useTranslation();\n    const dispatch = useDispatch();\n    const { resultOne, sorted, resultTwo } = useSelector((state: any) => state);\n    const [running, setRunning] = useState(false);\n    const [languageValue, setLanguageValue] = useState(true);\n    const [displayFact, setDisplayFact] = useState(false);\n    const [factData, setFactData] = useState<Fact[]>([]);\n    const [arraySize, setArraySize] = useState<number>(10);\n    const sortingInProgressState = useSelector(\n        (state: any) => state.sortInProgress\n    );\n    const iterationsCompletedState = useSelector(\n        (state: any) => state.iterationsCompleted\n    );\n    const stopControllerRef = useRef<AbortController | null>(null);\n    const [selectedAlgorithm, setSelectedAlgorithm] = React.useState<string[]>(\n        []\n    );\n\n    const ITEM_HEIGHT = 48;\n    const ITEM_PADDING_TOP = 8;\n    const MenuProps = {\n        PaperProps: {\n            style: {\n                maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n                width: '4rem'\n            }\n        }\n    };\n    const algorithmList = ['bubble', 'insertion'];\n    const algorithmHandleChange = (\n        event: SelectChangeEvent<typeof selectedAlgorithm>\n    ) => {\n        const {\n            target: { value }\n        } = event;\n        setSelectedAlgorithm(\n            // On autofill we get a stringified value.\n            typeof value === 'string' ? value.split(',') : value\n        );\n    };\n\n    // Generate the data array for the BarGraph component\n    const GenerateDataGraph = (\n        arrayX: { color: string; value: number }[],\n        arrayY: number\n    ): { x: number; y: number }[] => {\n        return arrayX.map((item, index) => ({ x: index, y: item.value }));\n    };\n\n    // Clear the numbers and reset the sorting state\n    const RemoveNumberFunction = () => {\n        dispatch(sortedAction(false));\n        dispatch(iterationsCompletedAction(true));\n        dispatch(generateNumbersAction(arraySize));\n    };\n\n    // Perform bubble sort\n    const bubbleSort = async (stopControllerRef: any, graphNumber: number) => {\n        setRunning(true);\n        dispatch(sortInProgressAction(true));\n        await BubbleSort(\n            resultOne,\n            stopControllerRef.signal,\n            dispatch,\n            graphNumber\n        );\n    };\n\n    // Perform insertion sort\n    const insertionSort = async (\n        stopControllerRef: any,\n        graphNumber: number\n    ) => {\n        setRunning(true);\n        dispatch(sortInProgressAction(true));\n        await InsertionSort(\n            resultTwo,\n            stopControllerRef.signal,\n            dispatch,\n            graphNumber\n        );\n    };\n\n    const startSorting = () => {\n        dispatch(iterationsCompletedAction(true));\n        stopControllerRef.current = new AbortController();\n        try {\n            if (\n                selectedAlgorithm.includes('bubble') &&\n                selectedAlgorithm.includes('insertion')\n            ) {\n                Promise.all([\n                    bubbleSort(stopControllerRef.current, 0),\n                    insertionSort(stopControllerRef.current, 1)\n                ]);\n            } else if (selectedAlgorithm.includes('bubble')) {\n                bubbleSort(stopControllerRef.current, 0);\n            } else if (selectedAlgorithm.includes('insertion')) {\n                insertionSort(stopControllerRef.current, 0);\n            }\n        } catch (err) {\n            console.log(`error caught while calling sorting algo: ${err}`);\n        }\n    };\n\n    // Handle the array size slider change\n    const handleChange = (event: Event, value: number | number[]) => {\n        if (typeof value === 'number') {\n            setArraySize(value);\n            dispatch(generateNumbersAction(value)); // Update the array size in the Redux state\n        }\n        dispatch(sortedAction(false));\n    };\n\n    // Stop the sorting process\n    const stopSortingHandler = () => {\n        if (running) {\n            stopControllerRef.current?.abort();\n            setRunning(false);\n        }\n        dispatch(sortInProgressAction(false));\n    };\n\n    // Change the app language\n    const changeLanguageHandler = () => {\n        const newLanguage = languageValue ? 'fr' : 'en';\n        i18n.changeLanguage(newLanguage).then(() => {\n            setLanguageValue(!languageValue);\n        });\n    };\n\n    // Fetch facts data\n    const limit = 3;\n    const callFacts = async () => {\n        const data = await fetchData(limit);\n        setFactData(data);\n    };\n\n    const handleCheckboxClick = () => {\n        setDisplayFact((prevValue) => !prevValue);\n        callFacts();\n    };\n\n    useEffect(() => {\n        dispatch(generateNumbersAction(arraySize));\n    }, [arraySize, dispatch]);\n\n    useEffect(() => {\n        GenerateDataGraph(resultOne, resultOne.length);\n    }, [resultOne, resultTwo, arraySize, sortingInProgressState, factData]);\n\n    return (\n        <div style={{ background: colours.background }}>\n            <Container\n                disableGutters={true}\n                style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    minHeight: '100vh',\n                    background: colours.background\n                }}\n            >\n                {/* App Bar */}\n                <ThemeProvider theme={theme}>\n                    <AppBar\n                        position=\"static\"\n                        sx={{\n                            minHeight: '4rem',\n                            maxHeight: '6rem',\n                            backgroundColor: theme.palette.text.secondary\n                        }}\n                    >\n                        <Container disableGutters={true}>\n                            <Toolbar disableGutters>\n                                {/* App Title */}\n                                <Typography\n                                    sx={{\n                                        mr: 3,\n                                        display: { xs: 'flex', md: 'flex' },\n                                        color: theme.palette.text.primary,\n                                        fontSize: '1.5rem',\n                                        padding: '0 0 0 1.6rem'\n                                    }}\n                                >\n                                    {t(`title.mainPage`)}\n                                </Typography>\n\n                                {/* Array Size Slider */}\n                                <Box\n                                    sx={{\n                                        maxWidth: 125,\n                                        minWidth: 75\n                                    }}\n                                >\n                                    <Slider\n                                        id=\"array-size-slider\"\n                                        value={arraySize}\n                                        min={10}\n                                        step={1}\n                                        max={100}\n                                        color=\"secondary\"\n                                        onChange={handleChange}\n                                        disabled={sortingInProgressState}\n                                        valueLabelDisplay=\"auto\"\n                                        aria-labelledby=\"array-size-slider\"\n                                    />\n                                </Box>\n\n                                <Box\n                                    sx={{\n                                        flexGrow: 1,\n                                        display: { xs: 'flex', md: 'flex' },\n                                        alignItems: 'center',\n                                        justifyContent: 'center'\n                                    }}\n                                >\n                                    <CustomButton\n                                        id=\"stop-button\"\n                                        disabled={!sortingInProgressState}\n                                        onClick={stopSortingHandler}\n                                        width=\"5rem\"\n                                    >\n                                        {t('buttons.stop')}\n                                    </CustomButton>\n                                    <CustomButton\n                                        id=\"clear-numbers-button\"\n                                        disabled={sortingInProgressState}\n                                        onClick={RemoveNumberFunction}\n                                    >\n                                        {t(`buttons.updateNumbers`)}\n                                    </CustomButton>\n\n                                    <FormControl\n                                        sx={{\n                                            width: 175,\n                                            height: '3rem'\n                                        }}\n                                    >\n                                        <Select\n                                            multiple\n                                            displayEmpty\n                                            value={selectedAlgorithm}\n                                            onChange={algorithmHandleChange}\n                                            input={<OutlinedInput />}\n                                            renderValue={(selected) => {\n                                                if (selected.length === 0) {\n                                                    return (\n                                                        <em>\n                                                            {t(\n                                                                `dropDown.pickAlgo`\n                                                            )}\n                                                        </em>\n                                                    );\n                                                }\n\n                                                return selected.join(', ');\n                                            }}\n                                            MenuProps={MenuProps}\n                                            inputProps={{\n                                                'aria-label': 'Without label'\n                                            }}\n                                            sx={{\n                                                color: colours.secondary\n                                            }}\n                                        >\n                                            <MenuItem disabled value=\"\">\n                                                <em></em>\n                                            </MenuItem>\n                                            {algorithmList.map((name) => (\n                                                <MenuItem\n                                                    key={name}\n                                                    value={name}\n                                                    style={{\n                                                        color: colours.primary\n                                                    }}\n                                                >\n                                                    {t(`buttons.${name}`)}\n                                                </MenuItem>\n                                            ))}\n                                        </Select>\n                                    </FormControl>\n                                    <CustomButton\n                                        id=\"start-button\"\n                                        disabled={\n                                            sortingInProgressState ||\n                                            selectedAlgorithm.length === 0\n                                        }\n                                        width=\"5rem\"\n                                        onClick={startSorting}\n                                    >\n                                        {t('buttons.start')}\n                                    </CustomButton>\n                                    {/* Iterations Counter */}\n                                    <div\n                                        style={{\n                                            marginRight: 3,\n                                            display: 'flex',\n                                            alignItems: 'center',\n                                            padding: '0.5rem',\n                                            borderRadius: '4px'\n                                        }}\n                                    >\n                                        {t(`buttons.iterations`)}:\n                                        <Paper\n                                            elevation={3}\n                                            sx={{\n                                                padding: '0.5rem',\n                                                borderRadius: '4px',\n                                                marginLeft: '0.5rem',\n                                                color: colours.primary\n                                            }}\n                                        >\n                                            {selectedAlgorithm.length === 1 &&\n                                            selectedAlgorithm.includes(`bubble`)\n                                                ? iterationsCompletedState[0]\n                                                : selectedAlgorithm.length ===\n                                                      1 &&\n                                                  selectedAlgorithm.includes(\n                                                      `insertion`\n                                                  )\n                                                ? iterationsCompletedState[1]\n                                                : `${iterationsCompletedState[0]}/ ${iterationsCompletedState[1]}`}\n                                        </Paper>\n                                    </div>\n                                    <Checkbox\n                                        onClick={handleCheckboxClick}\n                                        sx={{ color: colours.error }}\n                                        icon={<StickyNote2Icon />}\n                                        checkedIcon={\n                                            <StickyNote2Icon\n                                                sx={{\n                                                    color: colours.success\n                                                }}\n                                            />\n                                        }\n                                    />\n\n                                    {/* Language Switch */}\n                                    <FormControlLabel\n                                        control={\n                                            <Switch\n                                                id=\"language-switch\"\n                                                disabled={false}\n                                                checked={!languageValue}\n                                                onChange={changeLanguageHandler}\n                                                color=\"secondary\"\n                                            />\n                                        }\n                                        label={languageValue ? 'En' : 'Fr'}\n                                        labelPlacement=\"start\"\n                                    />\n\n                                    {/* Toast Container */}\n                                    <ToastContainer\n                                        position=\"top-center\"\n                                        autoClose={2000}\n                                        hideProgressBar\n                                        newestOnTop={false}\n                                        closeOnClick\n                                        rtl={false}\n                                        pauseOnFocusLoss\n                                        draggable\n                                        pauseOnHover\n                                    />\n                                </Box>\n                            </Toolbar>\n                        </Container>\n                    </AppBar>\n                </ThemeProvider>\n                {/*++++++++++++ Bar components start here -------------*/}\n                <Container\n                    maxWidth=\"xl\"\n                    style={{\n                        marginTop: '2rem',\n                        display: 'grid',\n                        gridTemplateRows: '1fr 1fr',\n                        justifyContent: 'center',\n                        minHeight: '20rem'\n                    }}\n                >\n                    {/* Bar Graph */}\n                    {selectedAlgorithm.length === 0 ? (\n                        <FactCard\n                            style={{ width: '20%' }}\n                            title={t(`instructions.title`)}\n                            description1={t(`instructions.description1`)}\n                            description2={t(`instructions.description2`)}\n                        />\n                    ) : (\n                        <Box\n                            className=\"row\"\n                            style={{\n                                display: 'flex',\n                                flexDirection: 'column',\n                                alignItems: 'center',\n                                marginRight: '2rem',\n                                width: '100%'\n                            }}\n                        >\n                            <Typography variant=\"h6\">\n                                {t(`cards.${selectedAlgorithm[0]}.title`)}\n                            </Typography>\n\n                            <div\n                                style={{\n                                    display: 'flex',\n                                    width: '100%',\n                                    alignItems: 'center',\n                                    justifyContent: 'space-between'\n                                }}\n                            >\n                                <BarGraph\n                                    style={{ width: '80%' }}\n                                    result={\n                                        selectedAlgorithm[0] === `insertion`\n                                            ? resultTwo\n                                            : resultOne\n                                    }\n                                    sortingInProgressState={\n                                        sortingInProgressState\n                                    }\n                                    sorted={sorted}\n                                />\n                                <FactCard\n                                    style={{ width: '20%' }}\n                                    title={t(\n                                        `cards.${selectedAlgorithm[0]}.title`\n                                    )}\n                                    description1={t(\n                                        `cards.${selectedAlgorithm[0]}.description1`\n                                    )}\n                                    description2={t(\n                                        `cards.${selectedAlgorithm[0]}.description2`\n                                    )}\n                                />\n                            </div>\n                        </Box>\n                    )}\n                    {/* <GraphComponent\n                        sortingInProgressState={sortingInProgressState}\n                        resultTwo={resultTwo}\n                        selectedAlgorithm={selectedAlgorithm}\n                        sorted={sorted}\n                    /> */}\n                    {selectedAlgorithm.length === 2 ? (\n                        <Box\n                            className=\"row\"\n                            style={{\n                                display: 'flex',\n                                flexDirection: 'column',\n                                alignItems: 'center',\n                                marginRight: '2rem',\n                                width: '100%'\n                            }}\n                        >\n                            <Typography variant=\"h6\">\n                                {t(`cards.${selectedAlgorithm[1]}.title`)}\n                            </Typography>\n\n                            <div\n                                style={{\n                                    display: 'flex',\n                                    width: '100%',\n                                    alignItems: 'center',\n                                    justifyContent: 'space-between'\n                                }}\n                            >\n                                <BarGraph\n                                    style={{ width: '80%' }}\n                                    result={\n                                        selectedAlgorithm[1] === `insertion`\n                                            ? resultTwo\n                                            : resultOne\n                                    }\n                                    sortingInProgressState={\n                                        sortingInProgressState\n                                    }\n                                    sorted={sorted}\n                                />\n                                <FactCard\n                                    style={{ width: '20%' }}\n                                    title={t(\n                                        `cards.${selectedAlgorithm[1]}.title`\n                                    )}\n                                    description1={t(\n                                        `cards.${selectedAlgorithm[1]}.description1`\n                                    )}\n                                    description2={t(\n                                        `cards.${selectedAlgorithm[1]}.description2`\n                                    )}\n                                />\n                            </div>\n                        </Box>\n                    ) : (\n                        ''\n                    )}\n                </Container>\n\n                {/* Footer */}\n                <Container\n                    disableGutters={true}\n                    style={{\n                        marginTop: 'auto',\n                        width: '100%'\n                    }}\n                >\n                    <Footer />\n                </Container>\n            </Container>\n        </div>\n    );\n}\n","import { Typography } from '@mui/material';\nimport { I18nextProvider } from 'react-i18next';\nimport i18n from './i18n';\nimport Dashboard from './page/MainPage';\n\nfunction App() {\n    return (\n        <I18nextProvider i18n={i18n}>\n            <div className=\"App\">\n                <Dashboard />\n                <div className=\"Body\">\n                    <Typography></Typography>\n                </div>\n            </div>\n        </I18nextProvider>\n    );\n}\n\nexport default App;\n","//import { bubbleSort } from '../../component/Algorithms';\nimport { colours } from '../../styling/colours';\n\ninterface State {\n    resultOne: { color: string; value: number }[];\n    resultTwo: { color: string; value: number }[];\n\n    displayComplete: boolean;\n    sortInProgress: boolean;\n    sorted: boolean;\n    algoStop: boolean;\n    iterationsCompleted: number[];\n    generatedNumbers: { color: string; value: number }[];\n}\n\nconst initialState: State = {\n    resultOne: [],\n    resultTwo: [],\n    displayComplete: true,\n    sortInProgress: false,\n    sorted: false,\n    algoStop: false,\n    iterationsCompleted: [0, 0],\n    generatedNumbers: []\n};\n\nconst rootReducer = (state = initialState, action: any) => {\n    switch (action.type) {\n        case 'GENERATE_NUMBERS':\n            const arraySize = action.payload;\n            const result = [];\n            for (let counter = 0; counter < arraySize; counter++) {\n                const randomNumber = parseFloat(\n                    (Math.random() * 100).toFixed(0)\n                );\n                result.push({ color: colours.accent, value: randomNumber });\n            }\n            const resultOne = result;\n            const resultTwo = result;\n\n            return {\n                ...state,\n                resultOne,\n                resultTwo,\n                displayComplete: true,\n                generatedNumbers: result\n            };\n        case 'ITERATIONS_COMPLETED':\n            if (action.payload.clean === true) {\n                return { ...state, iterationsCompleted: [0, 0] };\n            }\n\n            const { choice } = action.payload;\n            const iterationsCompleted = [...state.iterationsCompleted];\n\n            if (choice === 0) {\n                iterationsCompleted[0] += 1;\n            } else if (choice === 1) {\n                iterationsCompleted[1] += 1;\n            }\n\n            return { ...state, iterationsCompleted };\n\n        case 'SORT_IN_PROGRESS':\n            const status = action.payload;\n\n            return { ...state, sortInProgress: status };\n        case 'SORTED':\n            const sorted = action.payload;\n            return { ...state, sorted: sorted };\n        case 'START_BUBBLE_SORT':\n            return { ...state, sortInProgress: true, algoStop: false };\n\n        case 'STOP_BUBBLE_SORT':\n            return { ...state, algoStop: true };\n        case 'SORT_NUMBERS_BUBBLE':\n            const arrayBubble = action.payload.newArray;\n            const graphNumberBubble = action.payload.graphNumber;\n            if (graphNumberBubble === 0)\n                return {\n                    ...state,\n                    resultOne: arrayBubble,\n                    displayComplete: true\n                };\n            return {\n                ...state,\n                resultTwo: arrayBubble,\n                displayComplete: true\n            };\n        case 'SORT_NUMBERS_INSERTION':\n            const arrayInsertion = action.payload.newArray;\n            const graphNumberInsertion = action.payload.graphNumber;\n            if (graphNumberInsertion === 0)\n                return {\n                    ...state,\n                    resultOne: arrayInsertion,\n                    displayComplete: true\n                };\n            return {\n                ...state,\n                resultTwo: arrayInsertion,\n                displayComplete: true\n            };\n        default:\n            return state;\n    }\n};\n\nexport default rootReducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport rootReducer from './reducers';\n\nconst store = configureStore({\n    reducer: rootReducer\n});\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './i18n';\nimport { Provider } from 'react-redux';\nimport store from './redux/reducers/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(//console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}