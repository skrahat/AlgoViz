{"version":3,"sources":["i18n.js","styling/colours.tsx","component/UIComponents/CustomButton.tsx","redux/reducers/actions.tsx","component/Algorithms.tsx","component/UIComponents/Footer.tsx","component/graphComponent/BarGraph.tsx","component/UIComponents/FactCard.tsx","component/constants.tsx","component/UIComponents/Alert.tsx","page/Dashboard.tsx","App.tsx","redux/reducers/reducers.tsx","redux/reducers/store.tsx","index.tsx"],"names":["resources","en","translation","fr","i18n","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","lng","interpolation","escapeValue","colours","primary","secondary","success","accent","error","background","footer","disable","CustomButton","_ref","id","children","width","props","_objectWithoutProperties","_excluded","_jsx","Button","_objectSpread","sx","height","color","display","margin","backgroundColor","border","concat","generateNumbersAction","arraySize","type","payload","sortInProgressAction","status","graphNumber","sortedAction","sorted","iterationsCompletedAction","clean","choice","sortNumbersBubbleAction","newArray","sortNumbersInsertionAction","sortNumbersMergeAction","BubbleSort","_asyncToGenerator","_regeneratorRuntime","mark","_callee","result","signal","dispatch","len","i","_loop","j","_ret","sortedArray","wrap","_context2","prev","next","_toConsumableArray","length","swap","_sortedArray","_context","aborted","abrupt","v","value","map","item","index","timer","stop","delegateYield","t0","_x","_x2","_x3","_x4","apply","arguments","InsertionSort","_ref2","_callee2","array","_loop2","_ret2","_context4","current","_sortedArray2","_context3","_x5","_x6","_x7","_x8","MergeSort","_ref3","_callee6","checkAbortSignal","resetColors","merge","sort","finalSortedArray","resetArray","_context8","Error","arr","_ref4","_callee4","left","right","start","resultArray","leftIndex","rightIndex","updateAndDispatch","_context6","_ref5","_callee3","mergedIndex","updatedArray","_context5","_x16","push","_x13","_x14","_x15","_ref6","_callee5","middle","sortedLeft","sortedRight","_args7","_context7","undefined","Math","floor","slice","sent","_x17","message","console","_x9","_x10","_x11","_x12","_x18","_timer","_callee7","ms","_context9","Promise","resolve","setTimeout","pow","Footer","_jsxs","Box","padding","textAlign","Typography","variant","Link","href","underline","mt","Date","getFullYear","Chart","register","BarController","BarElement","CategoryScale","LinearScale","Title","Tooltip","BarGraph","sortingInProgressState","style","GenerateDataGraph","arrayX","arrayY","x","y","GenerateDataColourGraph","data","labels","datasets","label","Array","fill","Bar","options","plugins","legend","scales","title","grid","text","animation","duration","FactCard","description1","description2","Card","minWidth","maxHeight","CardActionArea","CardContent","gutterBottom","component","TypeAnimation","sequence","speed","cursor","CardActions","algorithmList","MenuProps","PaperProps","ITEM_HEIGHT","theme","createTheme","palette","main","CustomAlert","severity","open","handleClose","Snackbar","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","Alert","Dashboard","_useTranslation","useTranslation","t","useDispatch","_useSelector","useSelector","state","results","_useState","useState","_useState2","_slicedToArray","running","setRunning","_useState3","_useState4","languageValue","setLanguageValue","_useState5","_useState6","setArraySize","sortInProgressArrayState","sortInProgressArray","iterationsCompletedState","iterationsCompleted","stopControllerRef","useRef","_React$useState","React","_React$useState2","selectedAlgorithm","setSelectedAlgorithm","_useState7","_useState8","showAlert","setShowAlert","bubbleSort","insertionSort","mergeSort","sortingFunctions","bubble","insertion","startSorting","selectedAlgorithms","promises","AbortController","filter","algorithm","sortingFunction","all","t1","useEffect","Container","disableGutters","flexDirection","minHeight","ThemeProvider","AppBar","position","Toolbar","mr","xs","md","fontSize","maxWidth","Slider","min","step","max","onChange","event","disabled","every","Boolean","valueLabelDisplay","flexGrow","alignItems","justifyContent","onClick","_stopControllerRef$cu","abort","FormControl","Select","multiple","displayEmpty","target","selectedValues","split","input","OutlinedInput","renderValue","selected","join","inputProps","MenuItem","name","marginRight","borderRadius","Paper","elevation","marginLeft","includes","FormControlLabel","control","Switch","checked","newLanguage","changeLanguage","then","labelPlacement","marginTop","gridTemplateRows","className","App","I18nextProvider","initialState","displayComplete","sortInProgress","algoStop","generatedNumbers","rootReducer","action","counter","randomNumber","parseFloat","random","toFixed","graphNumberProgress","newArrayBubble","graphNumberbubble","resultsbubble","newArrayInsertion","graphNumberInsertion","resultsInsertion","newArrayMerge","graphNumberMerge","resultsMerge","store","configureStore","reducer","ReactDOM","render","StrictMode","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.5b8c12fd.chunk.js","sourcesContent":["import i18n from 'i18next';\nimport Backend from 'i18next-http-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { initReactI18next } from 'react-i18next';\nimport translationEN from '../src/locales/en/translation.json';\nimport translationFR from '../src/locales/fr/translation.json';\n\nconst resources = {\n    en: {\n        translation: translationEN\n    },\n    fr: {\n        translation: translationFR\n    }\n};\n\ni18n.use(Backend)\n\n    .use(LanguageDetector)\n\n    .use(initReactI18next)\n\n    .init({\n        resources,\n        fallbackLng: 'en',\n        debug: true,\n        lng: 'en',\n        interpolation: {\n            escapeValue: false // not needed for react as it escapes by default\n        }\n    });\n\nexport default i18n;\n","export const colours = {\n    primary: '#292929',\n    secondary: '#f0f0f0',\n    success: '#7CCA67',\n    accent: '#FFD25A',\n    error: '#FF785A',\n    background: '#CCCCCC',\n    footer: '#292929',\n    disable: '#525252'\n};\n","import Button, { ButtonProps } from '@mui/material/Button';\nimport { colours } from '../../styling/colours';\n\ninterface CustomButtonProps extends ButtonProps {\n    id: string;\n    children: React.ReactNode;\n    width?: string;\n}\n\nconst CustomButton: React.FC<CustomButtonProps> = ({\n    id,\n    children,\n    width,\n    ...props\n}) => {\n    return (\n        <Button\n            id={id}\n            sx={{\n                width: width ? width : '10rem',\n                height: '3rem',\n                color: 'white',\n                display: 'block',\n                margin: '0rem 0.8rem',\n                //border: `1px solid ${colours.accent}`,\n                '&:hover': {\n                    backgroundColor: colours.accent,\n                    color: 'black'\n                },\n                '&.Mui-disabled': {\n                    // Override disabled text color\n                    color: colours.disable,\n                    border: `1px solid ${colours.disable}`\n                },\n                ...props.sx\n            }}\n            {...props}\n        >\n            {children}\n        </Button>\n    );\n};\n\nexport default CustomButton;\n","export const generateNumbersAction = (arraySize: number) => {\n    //console.log('generateNumbers action reached');\n    return {\n        type: 'GENERATE_NUMBERS',\n        payload: arraySize\n    };\n};\nexport const sortInProgressAction = (status: boolean, graphNumber: number) => {\n    //console.log('sortInProgess action reached');\n    return {\n        type: 'SORT_IN_PROGRESS',\n        payload: { status: status, graphNumber: graphNumber }\n    };\n};\nexport const sortedAction = (sorted: boolean) => {\n    //console.log('sorted action reached');\n    return {\n        type: 'SORTED',\n        payload: sorted\n    };\n};\nexport const startBubbleSortAction = (result: any, algoStop: any) => {\n    return {\n        type: 'START_BUBBLE_SORT',\n        payload: { result, algoStop }\n    };\n};\n\nexport const stopBubbleSortAction = () => {\n    return {\n        type: 'STOP_BUBBLE_SORT'\n    };\n};\n\nexport const iterationsCompletedAction = (clean: boolean, choice?: number) => {\n    return {\n        type: 'ITERATIONS_COMPLETED',\n        payload: { clean: clean, choice: choice }\n    };\n};\nexport const sortNumbersBubbleAction = (\n    newArray: number[],\n    graphNumber: number\n) => {\n    return {\n        type: 'SORT_NUMBERS_BUBBLE',\n        payload: { newArray: newArray, graphNumber: graphNumber }\n    };\n};\nexport const sortNumbersInsertionAction = (\n    newArray: number[],\n    graphNumber: number\n) => {\n    return {\n        type: 'SORT_NUMBERS_INSERTION',\n        payload: { newArray: newArray, graphNumber: graphNumber }\n    };\n};\nexport const sortNumbersMergeAction = (\n    newArray: number[],\n    graphNumber: number\n) => {\n    return {\n        type: 'SORT_NUMBERS_MERGE',\n        payload: { newArray: newArray, graphNumber: graphNumber }\n    };\n};\n","import {\n    iterationsCompletedAction,\n    sortInProgressAction,\n    sortNumbersBubbleAction,\n    sortNumbersInsertionAction,\n    sortNumbersMergeAction,\n    sortedAction\n} from '../redux/reducers/actions';\nimport { colours } from '../styling/colours';\n\nexport const BubbleSort = async (\n    result: any[],\n    signal: AbortSignal,\n    dispatch: any,\n    graphNumber: number\n) => {\n    const newArray = [...result];\n    const len = newArray.length;\n\n    for (let i = 0; i < len; i++) {\n        for (let j = 0; j < len - 1; j++) {\n            // Check if the abort signal is triggered\n            if (signal.aborted) {\n                const unsortedArray = newArray;\n\n                dispatch(sortNumbersBubbleAction(unsortedArray, graphNumber));\n                return;\n            }\n\n            if (newArray[j].value > newArray[j + 1].value) {\n                let swap = newArray[j];\n                newArray[j] = newArray[j + 1];\n                newArray[j + 1] = swap;\n\n                // Create a new sorted array with modified colors\n                const sortedArray = newArray.map((item, index) => {\n                    if (index === j || index === j + 1) {\n                        if (item.color === '#f45050') {\n                            return { ...item, color: colours.accent };\n                        } else {\n                            return { ...item, color: colours.error };\n                        }\n                    }\n                    return item;\n                });\n\n                dispatch(sortNumbersBubbleAction(sortedArray, graphNumber));\n                dispatch(iterationsCompletedAction(false, graphNumber));\n                await timer(len);\n            }\n        }\n    }\n    // Set the color of all elements to green to indicate the sorting is complete\n    const sortedArray = newArray.map((item) => {\n        return { ...item, color: colours.success };\n    });\n\n    dispatch(sortNumbersBubbleAction(sortedArray, graphNumber));\n\n    dispatch(sortInProgressAction(false, graphNumber));\n    dispatch(sortedAction(true));\n};\n\nexport const InsertionSort = async (\n    array: any[],\n    signal: AbortSignal,\n    dispatch: any,\n    graphNumber: number\n) => {\n    const newArray = [...array];\n    const len = newArray.length;\n\n    for (let i = 1; i < len; i++) {\n        let current = newArray[i];\n        let j = i - 1;\n\n        while (j >= 0 && newArray[j].value > current.value) {\n            if (signal.aborted) {\n                const unsortedArray = newArray;\n                dispatch(\n                    sortNumbersInsertionAction(unsortedArray, graphNumber)\n                );\n                return;\n            }\n            newArray[j + 1] = newArray[j];\n            // Create a new sorted array with modified colors\n            // eslint-disable-next-line no-loop-func\n            const sortedArray = newArray.map((item, index) => {\n                if (index === j || index === j + 1) {\n                    if (item.color === '#f45050') {\n                        return { ...item, color: colours.accent };\n                    } else {\n                        return { ...item, color: colours.error };\n                    }\n                }\n                return item;\n            });\n            dispatch(sortNumbersInsertionAction(sortedArray, graphNumber));\n            dispatch(iterationsCompletedAction(false, graphNumber));\n            await timer(len);\n            j--;\n        }\n\n        newArray[j + 1] = current;\n\n        // Create a new sorted array with green color for the current element\n        const sortedArray = newArray.map((item, index) => {\n            if (index === j + 1) {\n                return { ...item, color: colours.error };\n            }\n            return item;\n        });\n\n        dispatch(sortNumbersInsertionAction(sortedArray, graphNumber));\n    }\n\n    // Set the color of all elements to green to indicate the sorting is complete\n    const sortedArray = newArray.map((item) => {\n        return { ...item, color: colours.success };\n    });\n\n    dispatch(sortNumbersInsertionAction(sortedArray, graphNumber));\n    dispatch(sortInProgressAction(false, graphNumber));\n    dispatch(sortedAction(true));\n};\nexport const MergeSort = async (\n    result: any[],\n    signal: AbortSignal,\n    dispatch: any,\n    graphNumber: number\n) => {\n    const newArray = [...result];\n    const len = newArray.length;\n\n    const checkAbortSignal = () => {\n        if (signal.aborted) {\n            throw new Error('Aborted');\n        }\n    };\n    // Helper function to reset colors\n    const resetColors = (arr: any[]) => {\n        return arr.map((item) => {\n            if (item.color === colours.error) {\n                return { ...item, color: colours.accent };\n            }\n            return item;\n        });\n    };\n    const merge = async (left: any[], right: any[], start: number) => {\n        let resultArray = [],\n            leftIndex = 0,\n            rightIndex = 0;\n\n        const updateAndDispatch = async (mergedIndex: number) => {\n            checkAbortSignal();\n            const updatedArray = newArray.map((item, index) => {\n                if (index === start + mergedIndex) {\n                    if (item.color === '#f45050') {\n                        return { ...item, color: colours.accent };\n                    } else {\n                        return { ...item, color: colours.error };\n                    }\n                }\n                return item;\n            });\n            dispatch(sortNumbersMergeAction(updatedArray, graphNumber));\n            await timer(len / 2);\n        };\n\n        while (leftIndex < left.length && rightIndex < right.length) {\n            checkAbortSignal();\n\n            if (left[leftIndex].value < right[rightIndex].value) {\n                resultArray.push(left[leftIndex]);\n                newArray[start + leftIndex + rightIndex] = left[leftIndex];\n                await updateAndDispatch(leftIndex + rightIndex);\n                leftIndex++;\n            } else {\n                resultArray.push(right[rightIndex]);\n                newArray[start + leftIndex + rightIndex] = right[rightIndex];\n                await updateAndDispatch(leftIndex + rightIndex);\n                rightIndex++;\n            }\n        }\n\n        while (leftIndex < left.length) {\n            checkAbortSignal();\n\n            resultArray.push(left[leftIndex]);\n            newArray[start + leftIndex + rightIndex] = left[leftIndex];\n            await updateAndDispatch(leftIndex + rightIndex);\n            leftIndex++;\n        }\n\n        while (rightIndex < right.length) {\n            checkAbortSignal();\n\n            resultArray.push(right[rightIndex]);\n            newArray[start + leftIndex + rightIndex] = right[rightIndex];\n            await updateAndDispatch(leftIndex + rightIndex);\n            rightIndex++;\n        }\n\n        return resultArray;\n    };\n\n    const sort = async (array: any[], start = 0): Promise<any[]> => {\n        checkAbortSignal();\n\n        if (array.length === 1) {\n            return array;\n        }\n\n        const middle = Math.floor(array.length / 2);\n        const left = array.slice(0, middle);\n        const right = array.slice(middle);\n\n        const sortedLeft = await sort(left, start);\n        const sortedRight = await sort(right, start + middle);\n        return merge(sortedLeft, sortedRight, start);\n    };\n\n    try {\n        const sortedArray = await sort(newArray);\n\n        // Set the color of all elements to green to indicate the sorting is complete\n        const finalSortedArray = sortedArray.map((item) => {\n            return { ...item, color: colours.success };\n        });\n\n        dispatch(sortNumbersMergeAction(finalSortedArray, graphNumber));\n        dispatch(sortInProgressAction(false, graphNumber));\n        dispatch(sortedAction(true));\n    } catch (e) {\n        if ((e as Error).message === 'Aborted') {\n            //console.log('Merge sort aborted');\n            const resetArray = resetColors(newArray);\n            dispatch(sortNumbersMergeAction(resetArray, graphNumber));\n        } else {\n            console.error(e);\n            throw e; // rethrow the error if it's not an abort\n        }\n    }\n};\n\n// delay timer function\nasync function timer(ms: number) {\n    if (ms < 20)\n        return new Promise((resolve) => setTimeout(resolve, 1000 / ms));\n    return new Promise((resolve) =>\n        setTimeout(resolve, 1000 / Math.pow(ms + 1, 1.5))\n    );\n}\n","import React from 'react';\nimport { Box, Typography, Link } from '@mui/material';\nimport { colours } from '../../styling/colours';\n\nconst Footer = () => {\n    const email = 'asaduzzaman.rahat@mail.mcgill.ca';\n    const website = 'https://www.asadrahat.ca';\n\n    return (\n        <Box\n            sx={{\n                padding: '1rem',\n                textAlign: 'center',\n                color: colours.primary\n            }}\n        >\n            <Typography variant=\"body2\" color=\"inherit\">\n                <Link\n                    href={email}\n                    variant=\"caption\"\n                    color=\"inherit\"\n                    underline=\"none\"\n                >\n                    Contact me\n                </Link>\n                <br />\n            </Typography>\n            <Typography variant=\"caption\" color=\"inherit\" mt={1}>\n                <Link\n                    href={website}\n                    variant=\"caption\"\n                    color=\"inherit\"\n                    underline=\"none\"\n                >\n                    &copy; {new Date().getFullYear()} Asad Rahat. All rights\n                    reserved.\n                </Link>\n            </Typography>\n            <Typography variant=\"body2\" color=\"grey\">\n                v1.4\n            </Typography>\n        </Box>\n    );\n};\n\nexport default Footer;\n","import React from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart } from 'chart.js';\nimport {\n    BarController,\n    BarElement,\n    CategoryScale,\n    LinearScale,\n    Title,\n    Tooltip\n} from 'chart.js';\nimport { colours } from '../../styling/colours';\n\nChart.register(\n    BarController,\n    BarElement,\n    CategoryScale,\n    LinearScale,\n    Title,\n    Tooltip\n);\n\ninterface BarGraphProps {\n    result: { color: string; value: number }[];\n    sortingInProgressState: boolean;\n    sorted: boolean;\n    style?: React.CSSProperties;\n}\n\nconst BarGraph: React.FC<BarGraphProps> = ({\n    result,\n    sortingInProgressState,\n    sorted,\n    style\n}) => {\n    Chart.register(\n        BarController,\n        BarElement,\n        CategoryScale,\n        LinearScale,\n        Title,\n        Tooltip\n    );\n\n    const GenerateDataGraph = (\n        arrayX: { color: string; value: number }[],\n        arrayY: number\n    ) => {\n        var result: { x: number; y: number }[] = [];\n        for (var i = 0; i < arrayY; i++) {\n            result.push({ x: i, y: arrayX[i].value });\n        }\n        return result;\n    };\n\n    const GenerateDataColourGraph = (\n        arrayX: { color: string; value: number }[],\n        arrayY: number\n    ) => {\n        var result: string[] = [];\n        for (var i = 0; i < arrayY; i++) {\n            result.push(arrayX[i].color);\n        }\n        return result;\n    };\n\n    const data = {\n        labels: GenerateDataGraph(result, result.length).map((item) => item.x),\n        datasets: [\n            {\n                label: 'Numbers',\n                data: GenerateDataGraph(result, result.length),\n                backgroundColor: sortingInProgressState\n                    ? GenerateDataColourGraph(result, result.length)\n                    : sorted\n                    ? GenerateDataColourGraph(result, result.length).map(\n                          (color) =>\n                              color === colours.error\n                                  ? colours.error\n                                  : colours.success\n                      )\n                    : Array(result.length).fill(colours.accent)\n            }\n        ]\n    };\n\n    const options = {\n        plugins: {\n            legend: {\n                display: false\n            }\n        },\n        scales: {\n            x: {\n                title: {\n                    display: false\n                },\n                grid: {\n                    display: false // Remove x-axis grid lines\n                }\n            },\n            y: {\n                title: {\n                    display: true,\n                    text: 'Size'\n                },\n                grid: {\n                    display: false // Remove y-axis grid lines\n                }\n            }\n        },\n        animation: {\n            duration: 0\n        }\n    };\n\n    return (\n        <div style={style}>\n            <Bar options={options} data={data} />\n        </div>\n    );\n};\n\nexport default BarGraph;\n","import * as React from 'react';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\nimport { CardActionArea, CardActions } from '@mui/material';\nimport { TypeAnimation } from 'react-type-animation';\ninterface textType {\n    text: string;\n    animation: boolean;\n}\ninterface cardType {\n    title: textType;\n    description1: textType;\n    description2: textType;\n    style?: React.CSSProperties;\n}\n\nconst FactCard: React.FC<cardType> = ({\n    title,\n    description1,\n    description2,\n    style,\n    ...props\n}) => {\n    return (\n        <Card sx={{ minWidth: '15rem', maxHeight: '15rem', ...style }}>\n            <CardActionArea>\n                <CardContent>\n                    <Typography gutterBottom variant=\"h5\" component=\"div\">\n                        {title.animation ? (\n                            <TypeAnimation\n                                sequence={[title.text]}\n                                speed={50}\n                                cursor={false}\n                            />\n                        ) : (\n                            title.text\n                        )}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                        {description1.animation ? (\n                            <TypeAnimation\n                                sequence={[2000, description1.text]}\n                                speed={40}\n                                cursor={false}\n                            />\n                        ) : (\n                            description1.text\n                        )}\n                    </Typography>\n                    <br />\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                        {description2.animation ? (\n                            <TypeAnimation\n                                sequence={[6000, description2.text]}\n                                speed={40}\n                                cursor={false}\n                            />\n                        ) : (\n                            description2.text\n                        )}\n                    </Typography>\n                </CardContent>\n            </CardActionArea>\n            <CardActions>\n                {/* <Button size=\"small\" color=\"primary\">\n                    ...Read More\n                </Button> */}\n            </CardActions>\n        </Card>\n    );\n};\nexport default FactCard;\n","import { createTheme } from '@mui/material';\nimport { colours } from '../styling/colours';\n\nexport const algorithmList = ['bubble', 'insertion', 'merge'];\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nexport const MenuProps = {\n    PaperProps: {\n        style: {\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n            width: '4rem'\n        }\n    }\n};\n// Define the MUI theme\nexport const theme = createTheme({\n    palette: {\n        primary: {\n            main: colours.primary\n        },\n        secondary: {\n            main: colours.secondary\n        },\n        text: {\n            primary: colours.accent,\n            secondary: colours.primary\n        }\n    }\n});\n","import React from 'react';\nimport Alert from '@mui/material/Alert';\nimport Snackbar from '@mui/material/Snackbar';\n\ninterface CustomAlertProps {\n    message: string;\n    open: boolean;\n    severity?: 'error' | 'warning' | 'info' | 'success';\n    handleClose: () => void;\n}\n\nconst CustomAlert: React.FC<CustomAlertProps> = ({\n    message,\n    severity,\n    open,\n    handleClose\n}) => {\n    return (\n        <Snackbar\n            open={open}\n            autoHideDuration={6000}\n            onClose={handleClose}\n            anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n        >\n            <Alert onClose={handleClose} severity={severity} variant=\"filled\">\n                {message}\n            </Alert>\n        </Snackbar>\n    );\n};\n\nexport default CustomAlert;\n","import React, { useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    AppBar,\n    Box,\n    Toolbar,\n    Typography,\n    Container,\n    Slider,\n    Paper,\n    FormControlLabel,\n    SelectChangeEvent,\n    OutlinedInput,\n    FormControl,\n    Select,\n    MenuItem\n} from '@mui/material';\nimport { useTranslation } from 'react-i18next';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { ThemeProvider } from '@mui/material/styles';\nimport CustomButton from '../component/UIComponents/CustomButton';\nimport {\n    generateNumbersAction,\n    sortInProgressAction,\n    iterationsCompletedAction,\n    sortedAction\n} from '../redux/reducers/actions';\nimport { BubbleSort, InsertionSort, MergeSort } from '../component/Algorithms';\nimport Footer from '../component/UIComponents/Footer';\nimport BarGraph from '../component/graphComponent/BarGraph';\nimport Switch from '@mui/material/Switch';\nimport { colours } from '../styling/colours';\nimport FactCard from '../component/UIComponents/FactCard';\nimport { MenuProps, algorithmList, theme } from '../component/constants';\nimport { SortingFunctions } from './Dashboard.type';\nimport CustomAlert from '../component/UIComponents/Alert';\n\nexport default function Dashboard(): JSX.Element {\n    const { t, i18n } = useTranslation();\n    const dispatch = useDispatch();\n    const { results, sorted } = useSelector((state: any) => state);\n    const [running, setRunning] = useState(false);\n    const [languageValue, setLanguageValue] = useState(true);\n    const [arraySize, setArraySize] = useState<number>(10);\n    // const sortingInProgressState = useSelector(\n    //     (state: any) => state.sortInProgress\n    // );\n    const sortInProgressArrayState = useSelector(\n        (state: any) => state.sortInProgressArray\n    );\n    const iterationsCompletedState = useSelector(\n        (state: any) => state.iterationsCompleted\n    );\n    const stopControllerRef = useRef<AbortController | null>(null);\n    const [selectedAlgorithm, setSelectedAlgorithm] = React.useState<string[]>(\n        []\n    );\n    const [showAlert, setShowAlert] = useState(false);\n\n    const algorithmHandleChange = (\n        event: SelectChangeEvent<typeof selectedAlgorithm>\n    ) => {\n        const {\n            target: { value }\n        } = event;\n\n        const selectedValues =\n            typeof value === 'string' ? value.split(',') : value;\n\n        if (selectedValues.length <= 2) {\n            setSelectedAlgorithm(selectedValues);\n        } else {\n            setShowAlert(true);\n        }\n    };\n\n    // Generate the data array for the BarGraph component\n    const GenerateDataGraph = (\n        arrayX: { color: string; value: number }[],\n        arrayY: number\n    ): { x: number; y: number }[] => {\n        return arrayX.map((item, index) => ({ x: index, y: item.value }));\n    };\n\n    // Clear the numbers and reset the sorting state\n    const RemoveNumberFunction = () => {\n        dispatch(sortedAction(false));\n        dispatch(iterationsCompletedAction(true));\n        dispatch(generateNumbersAction(arraySize));\n    };\n\n    // Perform bubble sort\n    const bubbleSort = async (stopControllerRef: any, graphNumber: number) => {\n        setRunning(true);\n        dispatch(sortInProgressAction(true, graphNumber));\n\n        await BubbleSort(\n            results[graphNumber],\n            stopControllerRef.signal,\n            dispatch,\n            graphNumber\n        );\n    };\n\n    // Perform insertion sort\n    const insertionSort = async (\n        stopControllerRef: any,\n        graphNumber: number\n    ) => {\n        setRunning(true);\n        dispatch(sortInProgressAction(true, graphNumber));\n        await InsertionSort(\n            results[graphNumber],\n            stopControllerRef.signal,\n            dispatch,\n            graphNumber\n        );\n    };\n    const mergeSort = async (stopControllerRef: any, graphNumber: number) => {\n        setRunning(true);\n        dispatch(sortInProgressAction(true, graphNumber));\n\n        await MergeSort(\n            results[graphNumber],\n            stopControllerRef.signal,\n            dispatch,\n            graphNumber\n        );\n    };\n    const sortingFunctions: SortingFunctions = {\n        bubble: bubbleSort,\n        insertion: insertionSort,\n        merge: mergeSort\n    };\n    const startSorting = async () => {\n        dispatch(iterationsCompletedAction(true));\n        stopControllerRef.current = new AbortController();\n\n        try {\n            // Get all the selected algorithms\n            const selectedAlgorithms = selectedAlgorithm.filter(\n                (algorithm) => sortingFunctions[algorithm]\n            );\n\n            // If there's no selected algorithm, do nothing\n            if (!selectedAlgorithms.length) {\n                return;\n            }\n            // Map through the selected algorithms and start them\n            const promises = selectedAlgorithms.map((algorithm, index) => {\n                const sortingFunction = sortingFunctions[algorithm];\n                return sortingFunction(\n                    stopControllerRef.current as AbortController,\n                    index\n                );\n            });\n\n            // Wait for all the sorting algorithms to finish\n            try {\n                await Promise.all(promises);\n            } catch (err) {\n                console.error(\n                    'One of the sorting algorithms encountered an error:',\n                    err\n                );\n            }\n        } catch (err) {\n            console.error(`error caught while calling sorting algo: ${err}`);\n        }\n    };\n\n    // Handle the array size slider change\n    const handleChange = (event: Event, value: number | number[]) => {\n        if (typeof value === 'number') {\n            setArraySize(value);\n            dispatch(generateNumbersAction(value)); // Update the array size in the Redux state\n        }\n        dispatch(sortedAction(false));\n    };\n\n    // Stop the sorting process\n    const stopSortingHandler = () => {\n        if (running) {\n            stopControllerRef.current?.abort();\n            setRunning(false);\n        }\n        dispatch(sortInProgressAction(false, 2));\n    };\n\n    // Change the app language\n    const changeLanguageHandler = () => {\n        const newLanguage = languageValue ? 'fr' : 'en';\n        i18n.changeLanguage(newLanguage).then(() => {\n            setLanguageValue(!languageValue);\n        });\n    };\n\n    useEffect(() => {\n        dispatch(generateNumbersAction(arraySize));\n    }, [arraySize, dispatch]);\n\n    useEffect(() => {\n        GenerateDataGraph(results, results[0].length);\n    }, [results, arraySize, sortInProgressArrayState]);\n\n    return (\n        <div style={{ background: colours.background }}>\n            <Container\n                disableGutters={true}\n                style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    minHeight: '100vh',\n                    background: colours.background\n                }}\n            >\n                {/* App Bar */}\n                <ThemeProvider theme={theme}>\n                    <AppBar\n                        position=\"static\"\n                        sx={{\n                            minHeight: '4rem',\n                            maxHeight: '6rem',\n                            backgroundColor: theme.palette.text.secondary\n                        }}\n                    >\n                        <Container disableGutters={true}>\n                            <Toolbar disableGutters>\n                                {/* App Title */}\n                                <Typography\n                                    sx={{\n                                        mr: 3,\n                                        display: { xs: 'flex', md: 'flex' },\n                                        color: theme.palette.text.primary,\n                                        fontSize: '1.5rem',\n                                        padding: '0 0 0 1.6rem'\n                                    }}\n                                >\n                                    {t(`title.mainPage`)}\n                                </Typography>\n\n                                {/* Array Size Slider */}\n                                <Box\n                                    sx={{\n                                        maxWidth: 125,\n                                        minWidth: 75\n                                    }}\n                                >\n                                    <Slider\n                                        id=\"array-size-slider\"\n                                        value={arraySize}\n                                        min={10}\n                                        step={1}\n                                        max={100}\n                                        color=\"secondary\"\n                                        onChange={handleChange}\n                                        disabled={sortInProgressArrayState.every(\n                                            Boolean\n                                        )}\n                                        valueLabelDisplay=\"auto\"\n                                        aria-labelledby=\"array-size-slider\"\n                                    />\n                                </Box>\n\n                                <Box\n                                    sx={{\n                                        flexGrow: 1,\n                                        display: { xs: 'flex', md: 'flex' },\n                                        alignItems: 'center',\n                                        justifyContent: 'center'\n                                    }}\n                                >\n                                    <CustomButton\n                                        id=\"stop-button\"\n                                        disabled={sortInProgressArrayState.every(\n                                            (state: boolean) => state === false\n                                        )}\n                                        onClick={stopSortingHandler}\n                                        width=\"5rem\"\n                                    >\n                                        {t('buttons.stop')}\n                                    </CustomButton>\n                                    <CustomButton\n                                        id=\"clear-numbers-button\"\n                                        disabled={\n                                            !sortInProgressArrayState.every(\n                                                (value: boolean) =>\n                                                    !Boolean(value)\n                                            )\n                                        }\n                                        onClick={RemoveNumberFunction}\n                                    >\n                                        {t(`buttons.updateNumbers`)}\n                                    </CustomButton>\n                                    {showAlert && (\n                                        <CustomAlert\n                                            message=\"You can't select more than 2 algorithms.\"\n                                            open={showAlert}\n                                            severity=\"warning\"\n                                            handleClose={() =>\n                                                setShowAlert(false)\n                                            }\n                                        />\n                                    )}\n                                    <FormControl\n                                        sx={{\n                                            width: 175,\n                                            height: '3rem'\n                                        }}\n                                    >\n                                        <Select\n                                            multiple\n                                            displayEmpty\n                                            disabled={sortInProgressArrayState.every(\n                                                Boolean\n                                            )}\n                                            value={selectedAlgorithm}\n                                            onChange={algorithmHandleChange}\n                                            input={<OutlinedInput />}\n                                            renderValue={(selected) => {\n                                                if (selected.length === 0) {\n                                                    return (\n                                                        <em>\n                                                            {t(\n                                                                `dropDown.pickAlgo`\n                                                            )}\n                                                        </em>\n                                                    );\n                                                }\n\n                                                return selected.join(', ');\n                                            }}\n                                            MenuProps={MenuProps}\n                                            inputProps={{\n                                                'aria-label': 'Without label'\n                                            }}\n                                            sx={{\n                                                color: colours.secondary\n                                            }}\n                                        >\n                                            <MenuItem disabled value=\"\">\n                                                <em></em>\n                                            </MenuItem>\n                                            {algorithmList.map((name) => (\n                                                <MenuItem\n                                                    key={name}\n                                                    value={name}\n                                                    style={{\n                                                        color: colours.primary\n                                                    }}\n                                                >\n                                                    {t(`buttons.${name}`)}\n                                                </MenuItem>\n                                            ))}\n                                        </Select>\n                                    </FormControl>\n                                    <CustomButton\n                                        id=\"start-button\"\n                                        disabled={\n                                            sortInProgressArrayState.every(\n                                                Boolean\n                                            ) || selectedAlgorithm.length === 0\n                                        }\n                                        width=\"5rem\"\n                                        onClick={startSorting}\n                                    >\n                                        {t('buttons.start')}\n                                    </CustomButton>\n                                    {/* Iterations Counter */}\n                                    <div\n                                        style={{\n                                            marginRight: 3,\n                                            display: 'flex',\n                                            alignItems: 'center',\n                                            padding: '0.5rem',\n                                            borderRadius: '4px'\n                                        }}\n                                    >\n                                        {t(`buttons.iterations`)}:\n                                        <Paper\n                                            elevation={3}\n                                            sx={{\n                                                padding: '0.5rem',\n                                                borderRadius: '4px',\n                                                marginLeft: '0.5rem',\n                                                color: colours.primary\n                                            }}\n                                        >\n                                            {selectedAlgorithm.length === 1 &&\n                                            selectedAlgorithm.includes(`bubble`)\n                                                ? iterationsCompletedState[0]\n                                                : selectedAlgorithm.length ===\n                                                      1 &&\n                                                  selectedAlgorithm.includes(\n                                                      `insertion`\n                                                  )\n                                                ? iterationsCompletedState[1]\n                                                : `${iterationsCompletedState[0]}/ ${iterationsCompletedState[1]}`}\n                                        </Paper>\n                                    </div>\n\n                                    {/* Language Switch */}\n                                    <FormControlLabel\n                                        control={\n                                            <Switch\n                                                id=\"language-switch\"\n                                                disabled={false}\n                                                checked={!languageValue}\n                                                onChange={changeLanguageHandler}\n                                                color=\"secondary\"\n                                            />\n                                        }\n                                        label={languageValue ? 'En' : 'Fr'}\n                                        labelPlacement=\"start\"\n                                    />\n                                </Box>\n                            </Toolbar>\n                        </Container>\n                    </AppBar>\n                </ThemeProvider>\n                {/*++++++++++++++++++++++++++++++++++ Bar components start here --------------------------------*/}\n                <Container\n                    maxWidth=\"xl\"\n                    style={{\n                        marginTop: '2rem',\n                        display: 'grid',\n                        gridTemplateRows: '1fr 1fr',\n                        justifyContent: 'center',\n                        minHeight: '20rem'\n                    }}\n                >\n                    {/* Bar Graph */}\n                    {selectedAlgorithm.length === 0 ? (\n                        <FactCard\n                            style={{ width: '20%' }}\n                            title={{\n                                text: t(`instructions.title`),\n                                animation: false\n                            }}\n                            description1={{\n                                text: t(`instructions.description1`),\n                                animation: true\n                            }}\n                            description2={{\n                                text: t(`instructions.description2`),\n                                animation: true\n                            }}\n                        />\n                    ) : (\n                        <Box\n                            className=\"row\"\n                            style={{\n                                display: 'flex',\n                                flexDirection: 'column',\n                                alignItems: 'center',\n                                marginRight: '2rem',\n                                width: '100%'\n                            }}\n                        >\n                            <Typography variant=\"h6\">\n                                {t(`cards.${selectedAlgorithm[0]}.title`)}\n                            </Typography>\n\n                            <div\n                                style={{\n                                    display: 'flex',\n                                    width: '100%',\n                                    alignItems: 'center',\n                                    justifyContent: 'space-between'\n                                }}\n                            >\n                                <BarGraph\n                                    style={{ width: '80%' }}\n                                    result={results[0]}\n                                    // {getResultForAlgorithm(\n                                    //     selectedAlgorithm[0] as SortingAlgorithm\n                                    // )}\n                                    sortingInProgressState={\n                                        sortInProgressArrayState[0]\n                                    }\n                                    sorted={sorted}\n                                />\n                                <FactCard\n                                    style={{ width: '20%' }}\n                                    title={{\n                                        text: t(\n                                            `cards.${selectedAlgorithm[0]}.title`\n                                        ),\n                                        animation: false\n                                    }}\n                                    description1={{\n                                        text: t(\n                                            `cards.${selectedAlgorithm[0]}.description1`\n                                        ),\n                                        animation: false\n                                    }}\n                                    description2={{\n                                        text: t(\n                                            `cards.${selectedAlgorithm[0]}.description2`\n                                        ),\n                                        animation: false\n                                    }}\n                                />\n                            </div>\n                        </Box>\n                    )}\n                    {selectedAlgorithm.length === 2 ? (\n                        <Box\n                            className=\"row\"\n                            style={{\n                                display: 'flex',\n                                flexDirection: 'column',\n                                alignItems: 'center',\n                                marginRight: '2rem',\n                                width: '100%'\n                            }}\n                        >\n                            <Typography variant=\"h6\">\n                                {t(`cards.${selectedAlgorithm[1]}.title`)}\n                            </Typography>\n\n                            <div\n                                style={{\n                                    display: 'flex',\n                                    width: '100%',\n                                    alignItems: 'center',\n                                    justifyContent: 'space-between'\n                                }}\n                            >\n                                <BarGraph\n                                    style={{ width: '80%' }}\n                                    result={results[1]}\n                                    // {getResultForAlgorithm(\n                                    //     selectedAlgorithm[1] as SortingAlgorithm\n                                    // )}\n                                    sortingInProgressState={\n                                        sortInProgressArrayState[1]\n                                    }\n                                    sorted={sorted}\n                                />\n\n                                <FactCard\n                                    style={{ width: '20%' }}\n                                    title={{\n                                        text: t(\n                                            `cards.${selectedAlgorithm[1]}.title`\n                                        ),\n                                        animation: false\n                                    }}\n                                    description1={{\n                                        text: t(\n                                            `cards.${selectedAlgorithm[1]}.description1`\n                                        ),\n                                        animation: false\n                                    }}\n                                    description2={{\n                                        text: t(\n                                            `cards.${selectedAlgorithm[1]}.description2`\n                                        ),\n                                        animation: false\n                                    }}\n                                />\n                            </div>\n                        </Box>\n                    ) : (\n                        ''\n                    )}\n                </Container>\n\n                {/* Footer */}\n                <Container\n                    disableGutters={true}\n                    style={{\n                        marginTop: 'auto',\n                        width: '100%'\n                    }}\n                >\n                    <Footer />\n                </Container>\n            </Container>\n        </div>\n    );\n}\n","import { Typography } from '@mui/material';\nimport { I18nextProvider } from 'react-i18next';\nimport i18n from './i18n';\nimport Dashboard from './page/Dashboard';\n\nfunction App() {\n    return (\n        <I18nextProvider i18n={i18n}>\n            <div className=\"App\">\n                <Dashboard />\n                <div className=\"Body\">\n                    <Typography></Typography>\n                </div>\n            </div>\n        </I18nextProvider>\n    );\n}\n\nexport default App;\n","import { colours } from '../../styling/colours';\n\ninterface State {\n    results: { color: string; value: number }[][];\n    sortInProgressArray: boolean[];\n    displayComplete: boolean;\n    sortInProgress: boolean;\n    sorted: boolean;\n    algoStop: boolean;\n    iterationsCompleted: number[];\n    generatedNumbers: { color: string; value: number }[];\n}\n\nconst initialState: State = {\n    results: [[], []],\n    sortInProgressArray: [],\n    displayComplete: true,\n    sortInProgress: false,\n    sorted: false,\n    algoStop: false,\n    iterationsCompleted: [0, 0],\n    generatedNumbers: []\n};\n\nconst rootReducer = (state = initialState, action: any) => {\n    switch (action.type) {\n        case 'GENERATE_NUMBERS':\n            const arraySize = action.payload;\n            const result = [];\n            for (let counter = 0; counter < arraySize; counter++) {\n                const randomNumber = parseFloat(\n                    (Math.random() * 100).toFixed(0)\n                );\n                result.push({ color: colours.accent, value: randomNumber });\n            }\n            return {\n                ...state,\n                results: [result, result],\n                sortInProgressArray: [false, false],\n                displayComplete: true,\n                generatedNumbers: result\n            };\n\n        case 'ITERATIONS_COMPLETED':\n            if (action.payload.clean === true) {\n                return { ...state, iterationsCompleted: [0, 0] };\n            }\n            const { choice } = action.payload;\n            const iterationsCompleted = [...state.iterationsCompleted];\n\n            if (choice === 0) {\n                iterationsCompleted[0] += 1;\n            } else if (choice === 1) {\n                iterationsCompleted[1] += 1;\n            }\n\n            return { ...state, iterationsCompleted };\n\n        case 'SORT_IN_PROGRESS':\n            const status = action.payload.status;\n            const graphNumberProgress = action.payload.graphNumber;\n            if (graphNumberProgress === 0) {\n                return {\n                    ...state,\n                    sortInProgressArray: [status, state.sortInProgressArray[1]]\n                };\n            } else if (graphNumberProgress === 1) {\n                return {\n                    ...state,\n                    sortInProgressArray: [state.sortInProgressArray[0], status]\n                };\n            } else\n                return {\n                    ...state,\n                    sortInProgressArray: [status, status]\n                };\n\n        case 'SORTED':\n            const sorted = action.payload;\n            return { ...state, sorted: sorted };\n\n        case 'START_BUBBLE_SORT':\n            return {\n                ...state,\n                sortInProgressArray: [true, true],\n                algoStop: false\n            };\n\n        case 'STOP_BUBBLE_SORT':\n            return { ...state, algoStop: true };\n\n        case 'SORT_NUMBERS_BUBBLE':\n            const newArrayBubble = action.payload.newArray;\n            const graphNumberbubble = action.payload.graphNumber;\n\n            // This will replace the result at the specific index (graphNumber)\n            const resultsbubble = state.results.map((result, index) =>\n                index === graphNumberbubble ? newArrayBubble : result\n            );\n\n            return {\n                ...state,\n                results: resultsbubble,\n                displayComplete: true\n            };\n        case 'SORT_NUMBERS_INSERTION':\n            const newArrayInsertion = action.payload.newArray;\n            const graphNumberInsertion = action.payload.graphNumber;\n\n            // This will replace the result at the specific index (graphNumber)\n            const resultsInsertion = state.results.map((result, index) =>\n                index === graphNumberInsertion ? newArrayInsertion : result\n            );\n\n            return {\n                ...state,\n                results: resultsInsertion,\n                displayComplete: true\n            };\n        case 'SORT_NUMBERS_MERGE':\n            const newArrayMerge = action.payload.newArray;\n            const graphNumberMerge = action.payload.graphNumber;\n\n            // This will replace the result at the specific index (graphNumber)\n            const resultsMerge = state.results.map((result, index) =>\n                index === graphNumberMerge ? newArrayMerge : result\n            );\n\n            return {\n                ...state,\n                results: resultsMerge,\n                displayComplete: true\n            };\n        default:\n            return state;\n    }\n};\n\nexport default rootReducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport rootReducer from './reducers';\n\nconst store = configureStore({\n    reducer: rootReducer\n});\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './i18n';\nimport { Provider } from 'react-redux';\nimport store from './redux/reducers/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(//console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}